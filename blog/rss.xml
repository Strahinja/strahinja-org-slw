<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
<atom:link href="https://strahinja.org/blog/rss.xml" rel="self" 
    type="application/rss+xml" />
<link>https://strahinja.org/blog/rss.xml</link>
<title>//strahinja.org</title>
<description>Новости са личне странице Страхиње Радића</description>
<category>Blog</category>
<language>sr-rs</language>
<copyright>© 1999-2021 Страхиња Радић (Strahinya Radich)</copyright>
    <item>
        <title>Корак ка једноставном</title>
        <link>https://strahinja.org/blog/2021-02/20210207/</link>
        <guid>https://strahinja.org/blog/2021-02/20210207/</guid>
        <pubDate>Sun, 07 Feb 2021 22:22:00 +0100</pubDate>
        <description><![CDATA[
<p>У овом првом чланку после доста времена, пружићу кратак опис онога на чему сам
радио од последњег писања.</p>

<h2>suckless филозофија</h2>

<p>Суштина ове <a href="https://suckless.org/philosophy/">програмерске филозофије</a> је у једноставности. Уместо да
циљ писања програма буде изворни код који се мери десетинама хиљада линија кода,
користи десетине библиотека и има за резултат шарену апликацију која је спорија
од пужа, циљ се поставља на што краће програме који притом не губе на
функционалности.  Обично мањи и једноставнији програми садрже и мање
грешака.</p>

<p>Примењено на мој сајт, <em>JavaScript</em> је у случају личне презентације апсолутно
непотребан. Једини њен део коме је заиста потребан <em>JavaScript</em> је страница са
програмима, на којој су програми могли да се извршавају преко емулатора
<em>DOS</em>-а<a href="#footnote-1" id="footnote-text-1"><sup>1</sup></a>. <em>MySQL</em> база је такође непотребна — уместо ње користим
<em>CSV</em> фајлове за складиштење података. Зашто компликовати?</p>

<h2>slweb</h2>

<p>Програм који омогућава писање страница у <em>Markdown</em>-у је <a href="https://github.com/Strahinja/slweb"><strong>slweb</strong></a>,
статички генератор веб страна који пишем већ неко време. „Статички генератор веб
страна“ значи да је то програм који преводи текст, у овом случају задат у
посебној верзији формата <em>Markdown</em>, у <em>HTML</em>. Више о <strong>slweb</strong>-у можете видети
на <a href="https://strahinja.github.io/slweb">његовој страници</a>.</p>

<p>У овом тренутку сматрам да <strong>slweb</strong> има довољно могућности и да даје довољно
добар излаз да бих могао да верзију моје личне странице писану у њему, коју
припремам већ неко време, поставим уместо досадашње верзије која је писана у
<em>Nuxt.js</em>-у.</p>

<h2>strahinja-org-slw</h2>

<p>Ово је горепоменута верзија мог сајта, која се углавном састоји од <em>Markdown</em>
фајлова из директоријума <code>content</code> и низа фајлова система за изградњу
<a href="https://github.com/apenwarr/redo"><strong>redo</strong></a>.  На њој радим од када сам почео и рад на <strong>slweb</strong>-у.</p>

<h2>Artix Linux</h2>

<p>Мој повратак свету ГНУ-а са Линуксом је обележило сазнање да већина дистрибуција
користи нови <em>init</em> систем, звани <a href="https://suckless.org/sucks/systemd/ "><em>systemd</em></a>. Овај систем раскида са
Уникс филозофијом програма који „раде једну ствар и раде је добро“. Ради се о
наметнутом решењу од стране фирме <em>RedHat</em>, коју је усвојила већина <em>mainstream</em>
дистрибуција ГНУ-а са Линуксом. <em>Systemd</em> садржи читав низ дискутабилних решења,
која су описана на горњем линку. На срећу, постоје дистрибуције ГНУ-а са
Линуксом које користе алтернативне <em>init</em> системе. Дистрибуција за коју сам се
ја одлучио је <a href="https://artixlinux.org"><em>Artix Linux</em></a>.</p>

<hr />

<p>Ово је само кратак сиже, а пошто сада радим у далеко ефикаснијем систему за
писање веб страна, планирам чешће <em>update</em>-ове, наравно у мери у којој ми то
дозволе остале обавезе.</p>


<div class="footnotes">
<hr />
<p id="footnote-1"><a href="#footnote-text-1">1.</a>  Тренутно ова могућност није подржана.
</p>
</div><!--footnotes-->]]></description>
    </item>
    <item>
        <title>Подешавање groff-а</title>
        <link>https://strahinja.org/blog/2021-02/20210210/</link>
        <guid>https://strahinja.org/blog/2021-02/20210210/</guid>
        <pubDate>Wed, 10 Feb 2021 15:56:00 +0100</pubDate>
        <description><![CDATA[
<p>Један од два „традиционална“ система за слагање текста у ГНУ-у са Линуксом
(поред ЛаТеХ-а) је углавном мање познат: <em>groff</em>. Ради се о верзији система
<em>troff</em> која је развијена у оквиру Пројекта ГНУ. <em>Troff</em> је систем који је
настао још шездесетих година двадесетог века у оквиру оперативног система Уникс.
Он ради по принципу компајлера, слично ТеХ-у, и преводи изворни код документа у
формат за штампу, као што је <em>PS</em> или <em>PDF</em>.</p>

<p>Још мање је познато да се <em>groff</em> може искористити за форматирање докумената на
српском и у ћирилици. Данас сам на моју страницу поставио једно упутство о томе
како за то подесити <em>groff</em>. Упутство се може видети на страници <a href="/tekstovi/softver/groff-cir"><em>Groff</em> на српском</a>.</p>]]></description>
    </item>
    <item>
        <title>Програми које препоручујем</title>
        <link>https://strahinja.org/blog/2021-02/20210214/</link>
        <guid>https://strahinja.org/blog/2021-02/20210214/</guid>
        <pubDate>Sun, 14 Feb 2021 14:36:00 +0100</pubDate>
        <description><![CDATA[
<p>На страници „<a href="/tekstovi/softver/preporuke">Програми које препоручујем</a>“ коју сам данас додао сам
саставио списак програма које користим и препоручујем по категоријама. Намеравам
да овај списак редовно освежавам.</p>]]></description>
    </item>
    <item>
        <title>Затамњени Ungoogled-chromium</title>
        <link>https://strahinja.org/blog/2021-02/20210217/</link>
        <guid>https://strahinja.org/blog/2021-02/20210217/</guid>
        <pubDate>Wed, 17 Feb 2021 15:33:00 +0100</pubDate>
        <description><![CDATA[
<p>На листи програма које препоручујем коју сам недавно објавио, један од два
читача веба је <em>Ungoogled-chromium</em>. Пошто постављање тамног режима (<em>dark mode</em>)
у њему није баш очигледно, а није ни толико компликовано, поменућу шта је
потребно да се уради. Потребно је направити фајл (уколико већ не постоји)
<code>~/.config/chromium-flags.conf</code>, са следећим садржајем:</p>

<pre>
--force-dark-mode
--enable-features=WebUIDarkMode
</pre>

<p>После поновног покретања <em>chromium</em>-а, веб странице које то подржавају
(укључујући овај сајт) би требало да буду приказане са тамном темом.</p>]]></description>
    </item>
    <item>
        <title>Новости у RSS-у</title>
        <link>https://strahinja.org/blog/2021-02/20210221/</link>
        <guid>https://strahinja.org/blog/2021-02/20210221/</guid>
        <pubDate>Sun, 21 Feb 2021 23:24:00 +0100</pubDate>
        <description><![CDATA[
<p>Данас сам новој верзији мог сајта додао (вратио?) <a href="https://cyber.harvard.edu/rss/rss.html">RSS</a> фид. Ово значи да у
своје RSS читаче можете додати УРЛ:</p>

<blockquote> <a href="https://strahinja.org/blog/rss.xml">https://strahinja.org/blog/rss.xml</a></blockquote>

<p>и можете читати нове чланке (односно њихових првих неколико редова) са мог блога
и без отварања веб читача. Препоручујем <a href="https://newsboat.org">Newsboat</a>.</p>

<p><strong>Додатак 22.2.2021:</strong> Сада су чланци укључени у целости, са потпуним
форматирањем. </p>]]></description>
    </item>
    <item>
        <title>Мој први npm пакет</title>
        <link>https://strahinja.org/blog/2020-07/20200705/</link>
        <guid>https://strahinja.org/blog/2020-07/20200705/</guid>
        <pubDate>Sun, 05 Jul 2020 19:39:28 +0200</pubDate>
        <description><![CDATA[
<p>Претходних неколико дана је за мене било веома занимљиво, јер сам радио на
објављивању мог првог пакета на <em>npm</em>-у: <a href="https://www.npmjs.com/package/nuxt-content-highlight"><em>nuxt-content-highlight</em></a>. Ради се
о омотачу за компоненту <code>&lt;nuxt-content></code> која омогућава да се делови текста
истакну, као да су подвучени маркером. Ту функционалност сам додао овом сајту и
користио уз <em>markdown-it</em> за истицање траженог текста на страници са претрагом
већ пре више месеци, пре него што је објављен <em>@nuxt/content</em>, али сам је тек
сада издвојио у посебан пакет. Пријаве грешака или сугестије можете слати на
https://github.com/Strahinja/nuxt-content-highlight/issues.</p>]]></description>
    </item>
    <item>
        <title>Nuxtpress</title>
        <link>https://strahinja.org/blog/2020-06/20200624/</link>
        <guid>https://strahinja.org/blog/2020-06/20200624/</guid>
        <pubDate>Wed, 24 Jun 2020 02:00:00 +0200</pubDate>
        <description><![CDATA[
<p>Не много после мог претходног писања, <em>Nuxt.js</em>-ов тим је објавио 
<a href="https://nuxtjs.org/guide/release-notes/#v2.13.0">верзију 2.13</a>, која доноси неколико нових додатака за <em>Nuxt.js</em>, међу којима 
су и <a href="https://github.com/nuxt/components"><em>@nuxt/components</em></a> и <a href="https://content.nuxtjs.org"><em>@nuxt/content</em></a>. Овај други додатак је званично
решење за рад са чланцима у формату <em>Markdown</em> у <em>Nuxt.js</em>-у. Од тада сам у
слободно време углавном радио на пребацивању свих делова мог сајта који имају
везе са <em>Markdown</em>-ом на <em>@nuxt/content</em>. Осим овога, проучавао сам и начин на
који се <em>Nuxt</em> апликација може писати у <em>Typescript</em>-у, што је једна од идеја за
неки будући <em>update</em>.  Вратимо се сад <em>@nuxt/content</em>-у.</p>

<h2>Предности</h2>

<p>Осим очигледне предности постојања готовог <em>API</em>-ја за читање чланака у формату
<em>Markdown</em>, <em>@nuxt/content</em> нуди и <a href="https://content.nuxtjs.org/fetching#wherequery">напредно филтрирање</a> и 
<a href="https://content.nuxtjs.org/fetching#searchfield-value"><em>full-text</em> претрагу</a> преко интерфејса сличног <em>MongoDB</em>-у. Сада је довољно 
ставити <code>.md</code> фајлове у <code>/content</code> и може се написати, рецимо:</p>

<pre>
async asyncData({ $content })
{
    const latestArticles = await $content('/')
        .where({ type: { $eq: 'article' } })
        .sortBy('date', 'desc')
        .limit(5)
        .fetch();
    return {
        latestArticles,
    };
}
</pre>

<p>да би се учитало најсвежијих пет чланака сортираних по опадајућем редоследу.
Претрага се такође обавља директно:</p>

<pre>
async asyncData({ $content, route })
{
    const foundArticles = await $content('/')
        .search(route.params.q)
        .fetch();
    return {
        foundArticles,
    };
}
</pre>

<h2>Миграција</h2>

<p>Главна разлика у односу на <em>frontmatter-markdown-loader</em> је што се у
<em>@nuxt/content</em>-у уместо <em>markdown-it</em>-а за превођење <em>Markdown</em>-а у <em>HTML</em>
користи <a href="https://github.com/remarkjs/remark"><em>remark</em></a>. То значи да је за све <em>plugin</em>-ове <em>markdown-it</em>-а потребно
користити еквиваленте, наравно уколико они постоје. На пример, за сада <a href="https://github.com/remarkjs/ideas/issues/16">не постоји еквивалент <em>plugin</em>-а <em>markdown-it-figure-caption</em></a>.</p>

<p>Пошто је замисао <em>@nuxt/content</em>-а систем за управљање чланцима у виду фајлова,
а не слогова у бази података, за сада не постоји уграђена подршка за складиштење
чланака у бази уместо у фајл систему, па је потребно директно позивати <em>remark</em>.
Наравно, могуће је напоредо са њим користити и <em>markdown-it</em>, али мислим да је
то непотребно дуплирање зависности (<em>dependencies</em>) и није идеално. За сада још
увек користим оба решења заједно, док не довршим подршку за приказивање текстова
у одељку „Текстови“ уз помоћ <em>remark</em>-а.</p>

<p>
</p>]]></description>
    </item>
    <item>
        <title>Подршка за чланке</title>
        <link>https://strahinja.org/blog/2020-05/20200505/</link>
        <guid>https://strahinja.org/blog/2020-05/20200505/</guid>
        <pubDate>Tue, 05 May 2020 21:34:03 +0200</pubDate>
        <description><![CDATA[
<p>Данас сам довршио додавање почетног система за приказивање чланака у
<em>Markdown</em>-у. За разлику од тога како сам (за сада) реализовао приказивање
чланака овог блога, у страницама из одељка „<a href="https://strahinja.org/tekstovi">Текстови</a>“ нисам користио
<a href="https://github.com/hmsk/frontmatter-markdown-loader">frontmatter-markdown-loader</a>. Разлог за ово је што је тај пакет за <em>Nuxt</em>
прилагођен ситуацији у којој се серверски део апликације заиста извршава на
<em>Node.js</em> серверу и само шаље донекле или делимично обрађен садржај клијентском
делу. Уколико хостујемо сајт на статичком серверу, каква је већина (јефтиних)
хостинг понуда код домаћих провајдера, користићемо <em>SSG</em>, тј. статички генерисан
сајт. Ово не оставља места за додавање и уређивање чланака „у лету“, преко
интерфејса саме апликације, па сам одлучио да директно искористим <code>markdown-it</code>.</p>

<p>Пре свега, направио сам фајл <code>markdown-it.js</code> са следећим садржајем:</p>

<pre>
import markdownIt from 'markdown-it';
import markdownItAbbr from 'markdown-it-abbr';
//...

var md = new markdownIt({html: true})
    .use(markdownItAbbr)
    //...
    ;

//...

export { md };
</pre>

<p>а затим и фајл <code>plugins/markdown-it.js</code>:</p>


<pre>
import { md } from '../markdown-it';

export default({ app }, inject) =>
{
    inject('mdRender', markdown => md.render(markdown));
};

</pre>

<p>Тиме се функција <code>render()</code> убацује у <em>Nuxt</em>-ов <code>context</code> и <em>Vue</em> инстанцу, па
може да јој се приступи преко <code>context.app.$mdRender()</code> или <code>this.$mdRender()</code>.
Сада једноставно могу да у оквиру компоненте странице напишем:</p>

<pre>
&lt;template lang="pug">
    static-markdown(:markdown="markdown")
&lt;/template>

&lt;script>
import StaticMarkdown from '~/components/StaticMarkdown';
export default {
    name: 'Koord',
    components: { StaticMarkdown },
    data()
    {
        return {
            markdown: '',
        };
    },
    async asyncData({ store, app })
    {
        let linkId = 'koord';
        await store.dispatch('articles/loadArticle', { linkId },
                             { root: true });
        let article = store.getters['articles/article'];
        return {
            markdown: article && article.markdown
                ? app.$mdRender(article.markdown)
                : ''
        };
    }
};
&lt;/script>

</pre>

<p>и <em>Markdown</em> ће бити преведен у <em>HTML</em>, у време генерисања страница, што
омогућава видљивост претраживачима.  Истовремено, постоји могућност накнадне
хидрације подацима из базе. Планирам да овакву комбинацију евентуално применим и
на чланке овог блога.</p>

<p>
</p>]]></description>
    </item>
    <item>
        <title>Локални PHP API и JWT, први део</title>
        <link>https://strahinja.org/blog/2020-04/20200410/</link>
        <guid>https://strahinja.org/blog/2020-04/20200410/</guid>
        <pubDate>Fri, 10 Apr 2020 02:00:00 +0200</pubDate>
        <description><![CDATA[
<p>Кад желимо да направимо веб апликацију која треба да има могућност измене
података, једно од првих питања на које треба одговорити је како ће бити решена
веза између фронтенда, који је видљив корисницима, и бекенда, који чини погон
апликације. Временом су се усталили стандарди за размену података, као што је
<em>AJAX</em>, и формати представљања података, као што је <em>JSON</em>. Следеће питање које
се намеће је како контролисати права приступа и измене података. Ако додамо
могућност измене чланака или других елемената наше апликације, није згодно да та
могућност буде доступна свима. Данас је један од најраспрострањенијих начина
ауторизовања <a href="https://jwt.io"><em>JSON Web Token</em></a>, или скраћено <em>JWT</em>. Он функционише по
принципу јавног и тајног кључа. Подаци који нам могу послужити за идентификацију
чине <em>JWT</em>; они се потписују тајним кључем, кодирају уз помоћ <em>Base64</em> и шаљу
клијенту. Када клијент жели да приступи заштићеном ресурсу, уз захтев пошаље и
<em>JWT</em>, који се декодира и провери дешифровањем потписа јавним кључем. Само јавни
кључ који одговара тајном кључу којим је шифрован <em>JWT</em> ће верификовати податке.
<em>JWT</em> се састоји од три дела: заглавља (<em>header</em>), главног дела (<em>payload</em>) и
потписа (<em>signature</em>), који се после <em>Base64</em> кодирања раздвајају тачкама.</p>

<p>Рецимо, за токен:</p>

<blockquote> <code>eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwczovL2dvb2dsZS5jb20iLCJhdWQiOiJodHRwczovL2dvb2dsZS5jb20iLCJuYW1lIjoi0J_QtdGC0LDRgCDQn9C10YLRgNC-0LLQuNGbIiwidXNlcm5hbWUiOiJwZXRlcnBhbjEyMzQ1IiwiYWRtaW4iOmZhbHNlLCJpYXQiOjE1ODY1NDE2NjEsImV4cCI6MTU4NjU0NzU2NSwianRpIjoiYTU3MWQ0NWItMTdmNy00N2I3LWJjM2ItZWRhMzFkN2IyNmIzIn0.Hb4Z6bsFFY2k-tshcCtQBOt768MAH0jmYWrnHshfaeM</code></blockquote>

<p>Paste-овањем на сајту <a href="https://www.jsonwebtoken.io">jsonwebtoken.io</a> између осталог добијамо дешифрован
<em>JSON</em>, који представља главни део, <em>payload</em>, <em>JWT</em>-а:</p>

<pre>
{
 "iss": "https://google.com",
 "aud": "https://google.com",
 "name": "Петар Петровић",
 "username": "peterpan12345",
 "admin": false,
 "iat": 1586541661,
 "exp": 1586545925,
 "jti": "a571d45b-17f7-47b7-bc3b-eda31d7b26b3"
}
</pre>

<p>Сва поља су потпуно опциона, али су нека од њих ипак стандардизована у стандарду
<a href="https://tools.ietf.org/html/rfc7519">RFC 7519</a>. На пример, <code>iat</code> (<em>Issued At</em>) поље садржи Уникс <em>timestamp</em>
времена креирања <em>JWT</em>-а, а <code>iss</code> (<em>Issuer</em>) ентитет који је креирао <em>JWT</em>.</p>

<p>Уколико се информације садржане у <em>JWT</em>-у тако лако декодирају, с правом се
поставља питање безбедности <em>JWT</em>-а. Управо то је разлог тога да се не
препоручује смештање осетљивих података као што су лозинке у <em>payload</em>. <em>JWT</em>
служи само да успостави неку тврдњу, рецимо да је вредност параметра <code>name</code>
ниска <code>Петар Петровић</code>. <em>Тачност</em> тврдње се проверава дешифровањем потписа
јавним кључем.</p>]]></description>
    </item>
    <item>
        <title>Додавање тамне теме</title>
        <link>https://strahinja.org/blog/2020-03/20200303/</link>
        <guid>https://strahinja.org/blog/2020-03/20200303/</guid>
        <pubDate>Tue, 03 Mar 2020 01:00:00 +0100</pubDate>
        <description><![CDATA[
<p>Најновија ставка коју сам додао мом сајту док радим на подршци за пријављивање
преко друштвених мрежа је подршка за тамну тему прилагођену 
<a href="https://material.io/design/color/dark-theme.html">смерницама материјалног дизајна</a>. То се у <em><a href="https://vuetifyjs.com">Vuetify</a></em>-у изводи релативно
једноставно; најтеже је одабрати саме боје тамне палете.</p>

<p>Када се дефинишу боје, потребно је проследити тему <em>Vuetify</em>-у. Ја сам се
одлучио да тему поставим у два засебна фајла, који се затим учитавају преко
директиве <code>import</code>.</p>

<pre>
export default {
    primary: {
        base: '#426344',
        lighten1: '#6e916f',
        darken1: '#19391d',
        darken2: '#003300',
    },
    secondary: {
        base: '#7f9a7f',
        lighten1: '#afcbae',
        darken1: '#526c53',
    },
    accent: '#d3dc7b',
    error: '#d45858',
    info: '#4592cf',
    success: '#69b069',
    warning: '#c78634'
};

</pre>

<pre>
import light from './theme/dunedain-light';

import dark from './theme/dunedain-dark';

// ...
export default {
// ...
vuetify: {
        // ...
        theme: {
            // ...
            themes: {
                light, dark
            }
        }
    },
};
</pre>]]></description>
    </item>
    <item>
        <title>Од Vim-а до IDE-а</title>
        <link>https://strahinja.org/blog/2020-01/20200117/</link>
        <guid>https://strahinja.org/blog/2020-01/20200117/</guid>
        <pubDate>Fri, 17 Jan 2020 01:00:00 +0100</pubDate>
        <description><![CDATA[
<p>Једно од питања које ми други програмери поставе кад чују да се бавим
програмирањем је које интегрисано окружење користим за развој апликација. По
правилу се изненаде кад уместо очекиваних одговора као што су <em>VS Code</em>,
<em>JetBrains Web Storm</em> или <em>NetBeans</em>, чују да користим <em>Vim</em>. Овај програм је
током година доста напредовао у односу на своју инспирацију, програм <em>vi</em>, тако
да данас сасвим комотно може да парира горенаведеним окружењима, или их чак и
престигне.</p>

<p>Чуђење вероватно потиче од нетривијалног начина задавања чак и најосновнијих
операција: рецимо, <em>vi</em> се, за разлику од велике већине других уређивача,
подразумевано налази у „командном режиму“, па га није могуће само покренути и
одмах почети са уношењем текста, већ се мора претходно пребацити у режим уноса
пречицом <kbd>i</kbd>. Међутим, кад се једном „уђе у штос“, могуће су прилично напредне
операције, које се све активирају са неколико тастера, рецимо <code>ddp</code> у командном
режиму мења редослед два реда текста, а <code>cw</code> брише знаке до краја речи и
пребацује се у <em>insert mode</em>, па тако можете заменити реч. Наредба за замену
текста у читавом пасусу је само незнатно компликованија: <code>vipc</code>. Програмерима је
изузетно корисно пребацивање између отворене и затворене заграде у пару тастером
<kbd>%</kbd> или селекција свега између витичастих заграда комбинацијом <code>vi}</code>.</p>

<p>Ја константно допуњавам моја подешавања <em>Vim</em>-а, па ћу укратко написати и о
томе.</p>

<h2>Инсталација</h2>

<p>Пре свега, програм који користим за развој апликација се тачније зове <em>Neovim</em>,
и још прецизније, користим његову варијанту <em>neovim-qt</em>. Ради се о програму који
је написан „од нуле“, уз задржану компатибилност са <em>Vim</em>-ом (а и он сам, <em>Vim</em>
– <em>Vi IMproved</em>, је побољшана верзија програма <em>vi</em>). Њега можете инсталирати
пратећи упутства са <a href="https://neovim.io">neovim.io</a>. Ипак, јасноће ради, овде ћу
наставити да га зовем <em>Vim</em>.</p>

<h2>Додаци</h2>

<p>Иако је <em>Vim</em> сам по себи веома моћан, прави разлог тога што се може поредити са
интегрисаним окружењима су додаци. Само неки од додатака које користим су:</p>

<ul>
<li><p><a href="https://github.com/vim-ctrlspace/vim-ctrlspace">Vim-CtrlSpace</a>, додатак за
  управљање радним окружењем и чување сесија.</p>
</li>
<li><p><a href="https://github.com/dense-analysis/ale">ALE</a>, додатак за проверу и исправљање
  синтаксе.</p>
</li>
<li><p><a href="https://github.com/neoclide/coc.nvim">Coc</a>, <em>IntelliSense</em> додатак за <em>Vim</em>.</p>
</li>
<li><p><a href="https://github.com/vim-airline/vim-airline">vim-airline</a>, додатак за
  улепшано приказивање напредних информација у вези са фајлом који се уређује.</p>
</li>
<li><p><a href="https://github.com/elmindreda/vimcolors">vimcolors/phosphor.vim</a>, тема за
  <em>Vim</em> која подсећа на старе текстуалне терминале или боје кода у филму
  <em>„Matrix“</em>.</p>
</li></ul>
<p>Фајл са подешавањима <em>Vim</em>-а који користим одржавам у репозиторијуму
<a href="https://github.com/Strahinja/dotfiles">Strahinja/dotfiles</a>.</p>

<h2>Фонт</h2>

<p>Можда није толико очито, али и избор фонта је битан.  Мени се од постојећих
опција највише свиђа фонт <em>PxPlus IBM VGA</em> са сајта
<a href="https://int10h.org/oldschool-pc-fonts/fontlist/">int10h.org</a>, коме сам додао
симболе уз помоћ <a href="https://www.nerdfonts.com">Nerd Fonts patcher-а</a>. Резултат је
следећи:</p>

<figure>
<a href="/img/blog/20200117-01.webp" title="Снимак екрана програма Vim" class="image" target="_blank"><img src="/img/blog/20200117-01.webp" alt="Снимак екрана програма Vim" /></a><figcaption>Снимак екрана програма Vim</figcaption>
</figure>]]></description>
    </item>
    <item>
        <title>Природно друштво</title>
        <link>https://strahinja.org/blog/2019-12/20191202/</link>
        <guid>https://strahinja.org/blog/2019-12/20191202/</guid>
        <pubDate>Mon, 02 Dec 2019 01:00:00 +0100</pubDate>
        <description><![CDATA[
<p>Пажљивији пратиоци ове странице су сигурно приметили додатно дугме у
<em>app-bar</em>-у, које није радило ништа значајно. Данас сам започео додавање подршке
за пријављивање преко друштвених мрежа мом сајту. Ако сада притиснете дугме „<i
class="mdi mdi-account-question"></i> Пријава“, на дну екрана ће се отворити
панел сличан овоме:</p>

<figure>
<a href="/img/blog/20191202-01.webp" title="Панел за пријављивање преко друштвених мрежа" class="image" target="_blank"><img src="/img/blog/20191202-01.webp" alt="Панел за пријављивање преко друштвених мрежа" /></a><figcaption>Панел за пријављивање преко друштвених мрежа</figcaption>
</figure>


<p>У наредном периоду ћу радити на подршци за логовање. <em>ETA unknown.</em></p>]]></description>
    </item>
    <item>
        <title>Динамичке руте у статичкој апликацији</title>
        <link>https://strahinja.org/blog/2019-11/20191111/</link>
        <guid>https://strahinja.org/blog/2019-11/20191111/</guid>
        <pubDate>Mon, 11 Nov 2019 01:00:00 +0100</pubDate>
        <description><![CDATA[
<p>Наставивши развој сајта, приметио сам једну специфичност <em>Nuxt.js</em>-а. Уколико
статички генеришете апликацију преко <code>nuxt generate</code>, а не наведете експлицитно
које руте ће бити генерисане, руте са параметрима ће и даље функционисати, али
само ако су активиране кроз саму апликацију, преко <em>Vue Router</em>-а (рецимо,
<code>&lt;nuxt-link></code>). Ако унесете УРЛ странице у адресном пољу, или притиснете <kbd>F5</kbd>,
добићете поруку о грешци, као да рута не постоји!</p>

<h2>Проблем</h2>

<p>На пример, нека у <a href="https://ssr-dynamic-refresh.netlify.com">апликацији</a> имамо
следеће странице:</p>

<pre>
/pages
 ├──/search
 │   └──_docid.vue
 └──index.vue
</pre>

<p>Нека одговарајући фајлови садрже следећи код:</p>

<pre>
&lt;!--pages/index.vue-->
&lt;template>
    &lt;section>
      &lt;nuxt-link to="/search/first">Search: "first"&lt;/nuxt-link>
      &lt;nuxt-link to="/search/second">Search: "second"&lt;/nuxt-link>
    &lt;/section>
&lt;/template>

&lt;script>
export default {
    name: "Index"
};
&lt;/script>

&lt;!-- ... -->
</pre>

<pre>
&lt;!--pages/search/_docid.vue-->
&lt;template>
    &lt;div class="search">
      &lt;nuxt-link to="/">Back to home&lt;/nuxt-link>
      &lt;p>{{docBodies[documentId]}}&lt;/p>
    &lt;/div>
    &lt;!--doc-->
&lt;/template>

&lt;script>
export default {
    name: "Search",
    asyncData({ params }) {
      return {
        documentId: params.docid,
        docBodies: {
          first: "First document",
          second: "Second document"
        }
      };
    }
};
&lt;/script>

&lt;!-- ... -->
</pre>

<p>Покретањем <code>nuxt generate</code> без посебно подешене <code>generate</code> секције фајла
<code>nuxt.config.js</code> биће генерисана само основна рута, <code>/</code>. Ако приступимо почетној
страници, па <strong>затим</strong> активирамо линк <em>Search: "first"</em>, учитаће се страница за
претрагу, <code>/search/first</code>. Међутим, притиском на <kbd>F5</kbd> или <kbd>Ctrl</kbd>+<kbd>R</kbd>
страница неће бити исправно учитана. Исто се дешава приступом преко линка
<a href="https://ssr-dynamic-refresh.netlify.com/search/first">/search/first</a>.</p>

<p>Са овим понашањем <em>Nuxt.js</em>-а сам се суочио када сам желео да у мој блог додам
подршку за листање свих страница са одређеном ознаком. Рецимо, у мом блогу се за
то користи рута <code>/blog/tag/:tagname</code>, и овај чланак ће се појавити у листи чланака
на рути <a href="https://strahinja.org/blog/tag/SSR">/blog/tag/SSR</a>.</p>

<p>Ако негде у апликацији, рецимо у приказу појединачних чланака, позовемо</p>

<pre>
&lt;nuxt-link :to="`/blog/tag/${tag.name}`">
    {{tag.name}}
&lt;/nuxt-link>
</pre>

<p>све ће функционисати, али не и у поменута два случаја: ако директно посетимо УРЛ
или освежимо већ учитану страницу.</p>

<h2>Решење</h2>

<p>Решење овог проблема је генерисање странице која ће бити „резервна опција“ у
случају када задата рута није статички генерисана. Ово се постиже додавањем
опције <code>fallback</code> у секцију <code>generate</code> у датотеци <code>nuxt.config.js</code>:</p>

<pre>
export default {
   /*
    ** Rendering mode
    ** Doc: https://nuxtjs.org/api/configuration-mode
    */
   mode: "universal",

   // ...
   
   generate: {
      // ***************************************************
      // *** Without the next line, F5 on dynamic routes ***
      // *** will fail                                   ***
      // ***************************************************
      fallback: true
   },

   // ...
};
</pre>

<p>Ова опција има три могуће вредности:</p>

<ul>
<li><p><code>true</code>: <em>fallback</em> руту ће опслуживати фајл <code>/404.html</code>,
</p></li>
<li><p><code>false</code>: <em>fallback</em> руту ће опслуживати фајл <code>/200.html</code>,
</p></li>
<li><p><code>'[назив_фајла].html'</code>: експлицитно задавање фајла <em>fallback</em> руте.</p>
</li></ul>
<p>Ова лако занемарљива опција може представљати разлику између функционалног и
нефункционалног сајта.</p>]]></description>
    </item>
    <item>
        <title>Гистови у Markdown-у</title>
        <link>https://strahinja.org/blog/2019-11/20191119/</link>
        <guid>https://strahinja.org/blog/2019-11/20191119/</guid>
        <pubDate>Tue, 19 Nov 2019 01:00:00 +0100</pubDate>
        <description><![CDATA[
<p>Ових дана после мање паузе радим на неколико делова мог сајта, па једва стижем
да нешто и напишем о ономе шта додам. Недавно сам тако додао подршку за
учитавање <a href="https://help.github.com/en/github/writing-on-github/creating-gists">гистова</a> у чланке на овом блогу.</p>

<p>За оне који не знају шта су то <em>гистови (gists),</em> ради се о фајловима, или
деловима фајлова, са изворним кодом које је могуће делити и чак <em>fork</em>-овати као
било који други фајл на <em>GitHub</em>-у. Просто поставите мини-репо са једним или
више фајлова и поделите његов УРЛ. Сјајно! :smiley:</p>

<p>Ова могућност, која је уједно и тест динамичких компонената о којима сам
<a href="https://strahinja.org/blog/20191026">недавно писао</a>, ми је била посебан изазов и уједно извор материјала за учење
<em>Nuxt.js</em>-а. Видећемо које су неке од карактеристичних тачака које сам прешао
приликом њеног развоја.</p>

<h2>Почетак</h2>

<p>Рад са гистовима почињемо посетом УРЛ-а <a href="https://gist.github.com">https://gist.github.com</a>, где ће они
које означимо као јавне бити доступни на адреси облика</p>

<blockquote><code>https://gist.github.com/[корисничко_име]/[хеш]</code></blockquote>

<p>Верзији гиста у формату <em>JSON</em> можемо приступити додавањем <code>.json</code> на крај те
адресе, дакле:</p>

<blockquote> <code>https://gist.github.com/[корисничко_име]/[хеш].json</code></blockquote>

<p>Простим позивом <code>this.$axios.$get()</code> или <code>this.$http.$get()</code>, у зависности од
тога да ли користимо модул <a href="https://axios.nuxtjs.org"><em>axios</em></a> или <a href="https://http.nuxtjs.org"><em>http</em></a>, учитамо тај <em>JSON</em> и
посао је готов, зар не?</p>

<p>Нажалост, то није баш тако. Уколико вам не смета подразумевано <em>HTML</em>
форматирање поља <code>div</code> насталог <em>JSON</em> објекта, или чињеница да се сви фајлови
заједно налазе у том (скаларном) пољу, и то је довољно. За било шта више,
потребно је учитати гист преко <a href="https://developer.github.com/v3/gists"><em>API</em>-ја</a>.</p>

<h2>API</h2>

<p>За просто учитавање довољно је методом <em>GET</em> приступити УРЛ-у</p>

<blockquote> <code>http://api.github.com/gists/[хеш]</code></blockquote>

<p>где је <code>[хеш]</code> хеш код вашег гиста, исти као у претходном случају. Резултат је
опет <em>JSON</em> објекат, али који укључује фајлове у сировом облику као засебна
поља.</p>

<h2>Код</h2>

<p>Конкретан код сам раздвојио на онај који је оријентисан на податке (<em>Vuex
store</em>) и презентациони (компонента <code>Gist</code>). Ево најзанимљивијих делова:</p>

<pre>
&lt;template>
&lt;!-- ... -->
&lt;/template>

&lt;script>
export default {
    name: 'Gist',
    props: {
        gist: { type: Object, default: () => ({}), required: true },
        filename: { type: String, default: '', required: true },
        highlightedLine: { type: Number, default: 0, required: false },
    },
    computed: {
        gistRawUrl()
        {
            if (!this || !this.gist || !this.gist.files ||
this.filename.length==0
                || !this.gist.files[this.filename])
            {
                return null;
            }
            return this.gist.files[this.filename].raw_url;
        },
        gistLines()
        {
            if (!this || !this.gist || !this.gist.files ||
this.filename.length==0
                || !this.gist.files[this.filename])
            {
                return null;
            }
            return this.gist.files[this.filename].content;
        },
    },
    methods: {
        escapeHtml(html)
        {
            return html
                .replace(/&/g, '&')
                .replace(/&lt;/g, '&lt;')
                .replace(/>/g, '>')
                .replace(/"/g, '"')
                .replace(/'/g, ''');
        },
        formatGistLinesAsHtml(lines)
        {
            let result = '';
            if (lines && lines.length>0)
            {
                let linesArray = lines.split('n');
                for (let line in linesArray)
                {
                    result += (this.highlightedLine==parseInt(line)+1 ?
                        '&lt;tr class="highlighted-line">n' :
                        '&lt;tr>n') +
                    '&lt;td class="blob-num js-line-number" data-line-number="' +
                    (parseInt(line)+1).toString() + '">&lt;/td>n' +
                    '&lt;td class="blob-code blob-code-inner js-file-line">' +
                    this.escapeHtml(linesArray[line]) +
                    '&lt;/td>n' +
                    '&lt;/tr>n';
                }
            }
            return result;
        }
    },
};
&lt;/script>
&lt;style lang="sass">
@import '~/assets/sass/gist.sass'
&lt;/style>
</pre>

<p><code>Gist.vue</code> је компонента за приказивање гиста која је намењена директном
укључивању у <em>Markdown</em> фајл. Пошто се фајл преко <em>API</em>-ја учитава као чист
текст, даље се са његовим садржајем може радити било шта. На пример, можемо
означити појединачне линије или истаћи жељени <em>keyword</em>. Ова компонента се у
<em>Markdown</em> фајл укључује на следећи начин:</p>

<pre>
&lt;component :is="extraComponentLoader"
    :filename="'nuxt.config.js'"
    :highlighted-line="15"
    :gist="gist">&lt;/component>
</pre>


<p>
</p>]]></description>
    </item>
    <item>
        <title>Нови почетак ✨</title>
        <link>https://strahinja.org/blog/2019-10/20191026/</link>
        <guid>https://strahinja.org/blog/2019-10/20191026/</guid>
        <pubDate>Sat, 26 Oct 2019 02:00:00 +0200</pubDate>
        <description><![CDATA[
<p>Данас сам завршио следећу етапу у развоју моје личне странице, преласком на нови
<em>engine</em> који развијам учећи <a href="https://nuxtjs.org"><em>Nuxt.js</em></a>. Истовремено, морао сам да
трајно или привремено уклоним доста ствари које нису прилагођене новом систему.
Неки статички чланци, као што је <a href="https://strahinja.org/tekstovi/softver/ojl-3.0.html">мој превод ОЈЛ</a> (<a href="https://strahinja.org/tekstovi/softver/ojl-2.0.html">и верзије 2</a>),
су остали.</p>

<p>Поново планирам вођење веб дневника, тј. „блога“. Овај пут сам се одлучио да
чланке пишем у <em>Markdown</em>-у који се трансформише у <em>HTML</em> са могућношћу
коришћења <em>Vue.js</em> тагова компонената, дакле нечему што више личи на <em>Vue.js</em>
<em>template</em> него на чист <em>HTML</em>. Предност овог приступа можда није очита, али то
омогућава најразличитије динамичке додатке, почевши од компоненте која би
омогућавала додавање анкета, па све до компоненте за исцртавање фрактала или
приказивање <em>ASCII art</em>-а.</p>

<p>Са друге стране, <em>Markdown</em> је веома практичан као језик за писање чланака, што
знају сви који су имали прилике да коментаришу на <a href="https://stackoverflow.com"><em>Stack Overflow</em></a>-у
или пишу <code>README.md</code> документ на <a href="https://github.org"><em>GitHub</em></a>-у. Његова основна идеја је да
буде што ближи ономе како бисмо текст „форматирали“ у обичном <code>.txt</code> документу,
за разлику од <em>HTML</em>-а и других језика за означавање. У ери текстуалних
терминала се курзив писао уз помоћ подвлака (<code>_</code>) а полуцрна слова уз помоћ
<a href="#inline-footnote-1" id="inline-footnote-text-1"><sup>1</sup></a> звездица (<code>*</code>):</p>

<pre>
Да _нађемо_ и **изнађемо** решење.
</pre>

<p>што производи: „Да <em>нађемо</em> и <strong>изнађемо</strong> решење.“</p>

<p>Верзија <em>Markdown</em>-а коју користим садржи и уводни део сваког чланка у <em>YAML</em>-у,
који се назива <em>Frontmatter</em> и даје могућност да се и мета-тагови задају у
формату читљивом људима. Тако овај чланак почиње на следећи начин:</p>

<pre>
---
title: Нови почетак ✨
date: 2019-10-26T0:00:00.000Z
categories:
  - опште
  - ажурирања сајта
tags:
  - Nuxt.js
  - Markdown
---
</pre>

<p><em>Engine</em> који развијам даље организује чланке на основу ових ознака.</p>


<p>

</p>

<hr />
<p id="inline-footnote-1"><a href="#inline-footnote-text-1">1.</a> Jедноструких звездица, али нећемо ситничарити.</p>]]></description>
    </item>
</channel>
</rss>
