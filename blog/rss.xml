<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
<atom:link href="https://strahinja.org/blog/rss.xml" rel="self" 
    type="application/rss+xml" />
<link>https://strahinja.org/blog/rss.xml</link>
<title>//strahinja.org — Лична страница Страхиње Радића</title>
<description>Новости са strahinja.org-а</description>
<category>Blog</category>
<language>sr-rs</language>
<copyright>© 1999-2021 Страхиња Радић (Strahinya Radich)</copyright>
    <item>
        <title>Корак ка једноставном</title>
        <link>https://strahinja.org/blog/2021-02/20210207/</link>
        <guid>https://strahinja.org/blog/2021-02/20210207/</guid>
        <pubDate>Sun, 07 Feb 2021 22:22:00 +0100</pubDate>
        <description>   У овом првом чланку после доста времена, пружићу кратак опис онога на
   чему сам радио од последњег писања.

suckless филозофија

   Суштина ове [2]програмерске филозофије је у једноставности. Уместо да
   циљ писања програма буде изворни код који се мери десетинама хиљада
   линија кода, користи десетине библиотека и има за резултат шарену
   апликацију која је спорија од пужа, циљ се поставља на што краће
   програме који притом не губе на функционалности. Обично мањи и
   једноставнији програми садрже и мање грешака.

   Примењено на мој сајт, JavaScript је у случају личне презентације
   апсолутно непотребан. Једини њен део коме је заиста потребан JavaScript
   је страница са програмима, на којој су програми могли да се извршавају
   преко емулатора DOS-а[3]^1. MySQL база је такође непотребна — уместо ње
   користим CSV фајлове за складиштење података. Зашто компликовати?

slweb (...)</description>
    </item>
    <item>
        <title>Подешавање groff-а</title>
        <link>https://strahinja.org/blog/2021-02/20210210/</link>
        <guid>https://strahinja.org/blog/2021-02/20210210/</guid>
        <pubDate>Wed, 10 Feb 2021 15:56:00 +0100</pubDate>
        <description>   Један од два „традиционална“ система за слагање текста у ГНУ-у са
   Линуксом (поред ЛаТеХ-а) је углавном мање познат: groff. Ради се о
   верзији система troff која је развијена у оквиру Пројекта ГНУ. Troff је
   систем који је настао још шездесетих година двадесетог века у оквиру
   оперативног система Уникс. Он ради по принципу компајлера, слично
   ТеХ-у, и преводи изворни код документа у формат за штампу, као што је
   PS или PDF.

   Још мање је познато да се groff може искористити за форматирање
   докумената на српском и у ћирилици. Данас сам на моју страницу поставио
   једно упутство о томе како за то подесити groff. Упутство се може
   видети на страници [2]Groff на српском. (...)</description>
    </item>
    <item>
        <title>Програми које препоручујем</title>
        <link>https://strahinja.org/blog/2021-02/20210214/</link>
        <guid>https://strahinja.org/blog/2021-02/20210214/</guid>
        <pubDate>Sun, 14 Feb 2021 14:36:00 +0100</pubDate>
        <description>   На страници „[2]Програми које препоручујем“ коју сам данас додао сам
   саставио списак програма које користим и препоручујем по категоријама.
   Намеравам да овај списак редовно освежавам. (...)</description>
    </item>
    <item>
        <title>Затамњени Ungoogled-chromium</title>
        <link>https://strahinja.org/blog/2021-02/20210217/</link>
        <guid>https://strahinja.org/blog/2021-02/20210217/</guid>
        <pubDate>Wed, 17 Feb 2021 15:33:00 +0100</pubDate>
        <description>   На листи програма које препоручујем коју сам недавно објавио, један од
   два читача веба је Ungoogled-chromium. Пошто постављање тамног режима
   (dark mode) у њему није баш очигледно, а није ни толико компликовано,
   поменућу шта је потребно да се уради. Потребно је направити фајл
   (уколико већ не постоји) ~/.config/chromium-flags.conf, са следећим
   садржајем:
--force-dark-mode
--enable-features=WebUIDarkMode

   После поновног покретања chromium-а, веб странице које то подржавају
   (укључујући овај сајт) би требало да буду приказане са тамном темом. (...)</description>
    </item>
    <item>
        <title>Новости у RSS-у</title>
        <link>https://strahinja.org/blog/2021-02/20210221/</link>
        <guid>https://strahinja.org/blog/2021-02/20210221/</guid>
        <pubDate>Sun, 21 Feb 2021 23:24:00 +0100</pubDate>
        <description>   Данас сам новој верзији мог сајта додао (вратио?) [2]RSS фид. Ово значи
   да у своје RSS читаче можете додати УРЛ:

     [3]https://strahinja.org/blog/rss.xml

   и можете читати нове чланке (односно њихових првих неколико редова) са
   мог блога и без отварања веб читача. Препоручујем [4]Newsboat. (...)</description>
    </item>
    <item>
        <title>Мој први npm пакет</title>
        <link>https://strahinja.org/blog/2020-07/20200705/</link>
        <guid>https://strahinja.org/blog/2020-07/20200705/</guid>
        <pubDate>Sun, 05 Jul 2020 19:39:28 +0200</pubDate>
        <description>   Претходних неколико дана је за мене било веома занимљиво, јер сам радио
   на објављивању мог првог пакета на npm-у: [2]nuxt-content-highlight.
   Ради се о омотачу за компоненту (nuxt-content) која омогућава да се
   делови текста истакну, као да су подвучени маркером. Ту функционалност
   сам додао овом сајту и користио уз markdown-it за истицање траженог
   текста на страници са претрагом већ пре више месеци, пре него што је
   објављен @nuxt/content, али сам је тек сада издвојио у посебан пакет.
   Пријаве грешака или сугестије можете слати на
   https://github.com/Strahinja/nuxt-content-highlight/issues. (...)</description>
    </item>
    <item>
        <title>Nuxtpress</title>
        <link>https://strahinja.org/blog/2020-06/20200624/</link>
        <guid>https://strahinja.org/blog/2020-06/20200624/</guid>
        <pubDate>Wed, 24 Jun 2020 02:00:00 +0200</pubDate>
        <description>   Не много после мог претходног писања, Nuxt.js-ов тим је објавио
   [2]верзију 2.13, која доноси неколико нових додатака за Nuxt.js, међу
   којима су и [3]@nuxt/components и [4]@nuxt/content. Овај други додатак
   је званично решење за рад са чланцима у формату Markdown у Nuxt.js-у.
   Од тада сам у слободно време углавном радио на пребацивању свих делова
   мог сајта који имају везе са Markdown-ом на @nuxt/content. Осим овога,
   проучавао сам и начин на који се Nuxt апликација може писати у
   Typescript-у, што је једна од идеја за неки будући update. Вратимо се
   сад @nuxt/content-у.

Предности

   Осим очигледне предности постојања готовог API-ја за читање чланака у
   формату Markdown, @nuxt/content нуди и [5]напредно филтрирање и
   [6]full-text претрагу преко интерфејса сличног MongoDB-у. Сада је
   довољно ставити .md фајлове у /content и може се написати, рецимо:
async asyncData({ $content })
{
    const latestArticles = await $content('/') (...)</description>
    </item>
    <item>
        <title>Подршка за чланке</title>
        <link>https://strahinja.org/blog/2020-05/20200505/</link>
        <guid>https://strahinja.org/blog/2020-05/20200505/</guid>
        <pubDate>Tue, 05 May 2020 21:34:03 +0200</pubDate>
        <description>   Данас сам довршио додавање почетног система за приказивање чланака у
   Markdown-у. За разлику од тога како сам (за сада) реализовао
   приказивање чланака овог блога, у страницама из одељка „[2]Текстови“
   нисам користио [3]frontmatter-markdown-loader. Разлог за ово је што је
   тај пакет за Nuxt прилагођен ситуацији у којој се серверски део
   апликације заиста извршава на Node.js серверу и само шаље донекле или
   делимично обрађен садржај клијентском делу. Уколико хостујемо сајт на
   статичком серверу, каква је већина (јефтиних) хостинг понуда код
   домаћих провајдера, користићемо SSG, тј. статички генерисан сајт. Ово
   не оставља места за додавање и уређивање чланака „у лету“, преко
   интерфејса саме апликације, па сам одлучио да директно искористим
   markdown-it.

   Пре свега, направио сам фајл markdown-it.js са следећим садржајем:
import markdownIt from 'markdown-it';
import markdownItAbbr from 'markdown-it-abbr';
//...

var md = new markdownIt({html: true}) (...)</description>
    </item>
    <item>
        <title>Локални PHP API и JWT, први део</title>
        <link>https://strahinja.org/blog/2020-04/20200410/</link>
        <guid>https://strahinja.org/blog/2020-04/20200410/</guid>
        <pubDate>Fri, 10 Apr 2020 02:00:00 +0200</pubDate>
        <description>   Кад желимо да направимо веб апликацију која треба да има могућност
   измене података, једно од првих питања на које треба одговорити је како
   ће бити решена веза између фронтенда, који је видљив корисницима, и
   бекенда, који чини погон апликације. Временом су се усталили стандарди
   за размену података, као што је AJAX, и формати представљања података,
   као што је JSON. Следеће питање које се намеће је како контролисати
   права приступа и измене података. Ако додамо могућност измене чланака
   или других елемената наше апликације, није згодно да та могућност буде
   доступна свима. Данас је један од најраспрострањенијих начина
   ауторизовања [2]JSON Web Token, или скраћено JWT. Он функционише по
   принципу јавног и тајног кључа. Подаци који нам могу послужити за
   идентификацију чине JWT; они се потписују тајним кључем, кодирају уз
   помоћ Base64 и шаљу клијенту. Када клијент жели да приступи заштићеном
   ресурсу, уз захтев пошаље и JWT, који се декодира и провери
   дешифровањем потписа јавним кључем. Само јавни кључ који одговара
   тајном кључу којим је шифрован JWT ће верификовати податке. JWT се
   састоји од три дела: заглавља (header), главног дела (payload) и
   потписа (signature), који се после Base64 кодирања раздвајају тачкама. (...)</description>
    </item>
    <item>
        <title>Додавање тамне теме</title>
        <link>https://strahinja.org/blog/2020-03/20200303/</link>
        <guid>https://strahinja.org/blog/2020-03/20200303/</guid>
        <pubDate>Tue, 03 Mar 2020 01:00:00 +0100</pubDate>
        <description>   Најновија ставка коју сам додао мом сајту док радим на подршци за
   пријављивање преко друштвених мрежа је подршка за тамну тему
   прилагођену [2]смерницама материјалног дизајна. То се у [3]Vuetify-у
   изводи релативно једноставно; најтеже је одабрати саме боје тамне
   палете.

   Када се дефинишу боје, потребно је проследити тему Vuetify-у. Ја сам се
   одлучио да тему поставим у два засебна фајла, који се затим учитавају
   преко директиве import.
export default {
    primary: {
        base: '#426344',
        lighten1: '#6e916f',
        darken1: '#19391d',
        darken2: '#003300',
    },
    secondary: {
        base: '#7f9a7f',
        lighten1: '#afcbae', (...)</description>
    </item>
    <item>
        <title>Од Vim-а до IDE-а</title>
        <link>https://strahinja.org/blog/2020-01/20200117/</link>
        <guid>https://strahinja.org/blog/2020-01/20200117/</guid>
        <pubDate>Fri, 17 Jan 2020 01:00:00 +0100</pubDate>
        <description>   Једно од питања које ми други програмери поставе кад чују да се бавим
   програмирањем је које интегрисано окружење користим за развој
   апликација. По правилу се изненаде кад уместо очекиваних одговора као
   што су VS Code, JetBrains Web Storm или NetBeans, чују да користим Vim.
   Овај програм је током година доста напредовао у односу на своју
   инспирацију, програм vi, тако да данас сасвим комотно може да парира
   горенаведеним окружењима, или их чак и престигне.

   Чуђење вероватно потиче од нетривијалног начина задавања чак и
   најосновнијих операција: рецимо, vi се, за разлику од велике већине
   других уређивача, подразумевано налази у „командном режиму“, па га није
   могуће само покренути и одмах почети са уношењем текста, већ се мора
   претходно пребацити у режим уноса пречицом i. Међутим, кад се једном
   „уђе у штос“, могуће су прилично напредне операције, које се све
   активирају са неколико тастера, рецимо ddp у командном режиму мења
   редослед два реда текста, а cw брише знаке до краја речи и пребацује се
   у insert mode, па тако можете заменити реч. Наредба за замену текста у
   читавом пасусу је само незнатно компликованија: vipc. Програмерима је
   изузетно корисно пребацивање између отворене и затворене заграде у пару (...)</description>
    </item>
    <item>
        <title>Природно друштво</title>
        <link>https://strahinja.org/blog/2019-12/20191202/</link>
        <guid>https://strahinja.org/blog/2019-12/20191202/</guid>
        <pubDate>Mon, 02 Dec 2019 01:00:00 +0100</pubDate>
        <description>   Пажљивији пратиоци ове странице су сигурно приметили додатно дугме у
   app-bar-у, које није радило ништа значајно. Данас сам започео додавање
   подршке за пријављивање преко друштвених мрежа мом сајту. Ако сада
   притиснете дугме „ Пријава“, на дну екрана ће се отворити панел сличан
   овоме:
   [2]Панел за пријављивање преко друштвених мрежа Панел за пријављивање
   преко друштвених мрежа

   У наредном периоду ћу радити на подршци за логовање. ETA unknown. (...)</description>
    </item>
    <item>
        <title>Динамичке руте у статичкој апликацији</title>
        <link>https://strahinja.org/blog/2019-11/20191111/</link>
        <guid>https://strahinja.org/blog/2019-11/20191111/</guid>
        <pubDate>Mon, 11 Nov 2019 01:00:00 +0100</pubDate>
        <description>   Наставивши развој сајта, приметио сам једну специфичност Nuxt.js-а.
   Уколико статички генеришете апликацију преко nuxt generate, а не
   наведете експлицитно које руте ће бити генерисане, руте са параметрима
   ће и даље функционисати, али само ако су активиране кроз саму
   апликацију, преко Vue Router-а (рецимо, (nuxt-link)). Ако унесете УРЛ
   странице у адресном пољу, или притиснете F5, добићете поруку о грешци,
   као да рута не постоји!

Проблем

   На пример, нека у [2]апликацији имамо следеће странице:
/pages
 ├──/search
 │   └──_docid.vue
 └──index.vue

   Нека одговарајући фајлови садрже следећи код:
(!--pages/index.vue--)
(template) (...)</description>
    </item>
    <item>
        <title>Гистови у Markdown-у</title>
        <link>https://strahinja.org/blog/2019-11/20191119/</link>
        <guid>https://strahinja.org/blog/2019-11/20191119/</guid>
        <pubDate>Tue, 19 Nov 2019 01:00:00 +0100</pubDate>
        <description>   Ових дана после мање паузе радим на неколико делова мог сајта, па једва
   стижем да нешто и напишем о ономе шта додам. Недавно сам тако додао
   подршку за учитавање [2]гистова у чланке на овом блогу.

   За оне који не знају шта су то гистови (gists), ради се о фајловима,
   или деловима фајлова, са изворним кодом које је могуће делити и чак
   fork-овати као било који други фајл на GitHub-у. Просто поставите
   мини-репо са једним или више фајлова и поделите његов УРЛ. Сјајно!
   :smiley:

   Ова могућност, која је уједно и тест динамичких компонената о којима
   сам [3]недавно писао, ми је била посебан изазов и уједно извор
   материјала за учење Nuxt.js-а. Видећемо које су неке од
   карактеристичних тачака које сам прешао приликом њеног развоја.

Почетак

   Рад са гистовима почињемо посетом УРЛ-а [4]https://gist.github.com, где
   ће они које означимо као јавне бити доступни на адреси облика (...)</description>
    </item>
    <item>
        <title>Нови почетак ✨</title>
        <link>https://strahinja.org/blog/2019-10/20191026/</link>
        <guid>https://strahinja.org/blog/2019-10/20191026/</guid>
        <pubDate>Sat, 26 Oct 2019 02:00:00 +0200</pubDate>
        <description>   Данас сам завршио следећу етапу у развоју моје личне странице,
   преласком на нови engine који развијам учећи [2]Nuxt.js. Истовремено,
   морао сам да трајно или привремено уклоним доста ствари које нису
   прилагођене новом систему. Неки статички чланци, као што је [3]мој
   превод ОЈЛ ([4]и верзије 2), су остали.

   Поново планирам вођење веб дневника, тј. „блога“. Овај пут сам се
   одлучио да чланке пишем у Markdown-у који се трансформише у HTML са
   могућношћу коришћења Vue.js тагова компонената, дакле нечему што више
   личи на Vue.js template него на чист HTML. Предност овог приступа можда
   није очита, али то омогућава најразличитије динамичке додатке, почевши
   од компоненте која би омогућавала додавање анкета, па све до компоненте
   за исцртавање фрактала или приказивање ASCII art-а.

   Са друге стране, Markdown је веома практичан као језик за писање
   чланака, што знају сви који су имали прилике да коментаришу на [5]Stack
   Overflow-у или пишу README.md документ на [6]GitHub-у. Његова основна
   идеја је да буде што ближи ономе како бисмо текст „форматирали“ у
   обичном .txt документу, за разлику од HTML-а и других језика за (...)</description>
    </item>
</channel>
</rss>
