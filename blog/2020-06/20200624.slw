---
title: Nuxtpress
date: 2020-06-24T0:00:00.000Z
description: Markdown и званично у Nuxt-у
image: https://strahinja.org/img/preview-blog-strahinja.org.webp
imageAlt: Цртеж врха пенкала са умањеним логом са иницијалима СР и текстом //strahinja.org
id: nuxtpress
tags:
    - Nuxt.js
    - nuxt-content
    - Markdown
    - remark
categories:
    - ажурирања сајта
visible: true
---

Не много после мог претходног писања, _Nuxt.js_-ов тим је објавио 
[верзију 2.13][1], која доноси неколико нових додатака за _Nuxt.js_, међу којима 
су и [_@nuxt/components_][2] и [_@nuxt/content_][3]. Овај други додатак је званично
решење за рад са чланцима у формату _Markdown_ у _Nuxt.js_-у. Од тада сам у
слободно време углавном радио на пребацивању свих делова мог сајта који имају
везе са _Markdown_-ом на _@nuxt/content_. Осим овога, проучавао сам и начин на
који се _Nuxt_ апликација може писати у _Typescript_-у, што је једна од идеја за
неки будући _update_.  Вратимо се сад _@nuxt/content_-у.

## Предности

Осим очигледне предности постојања готовог _API_-ја за читање чланака у формату
_Markdown_, _@nuxt/content_ нуди и [напредно филтрирање][4] и 
[_full-text_ претрагу][5] преко интерфејса сличног _MongoDB_-у. Сада је довољно 
ставити `.md` фајлове у `/content` и може се написати, рецимо:

```
async asyncData({ $content })
{
    const latestArticles = await $content('/')
        .where({ type: { $eq: 'article' } })
        .sortBy('date', 'desc')
        .limit(5)
        .fetch();
    return {
        latestArticles,
    };
}
```

да би се учитало најсвежијих пет чланака сортираних по опадајућем редоследу.
Претрага се такође обавља директно:

```
async asyncData({ $content, route })
{
    const foundArticles = await $content('/')
        .search(route.params.q)
        .fetch();
    return {
        foundArticles,
    };
}
```

## Миграција

Главна разлика у односу на _frontmatter-markdown-loader_ је што се у
_@nuxt/content_-у уместо _markdown-it_-а за превођење _Markdown_-а у _HTML_
користи [_remark_][6]. То значи да је за све _plugin_-ове _markdown-it_-а потребно
користити еквиваленте, наравно уколико они постоје. На пример, за сада [не
постоји еквивалент _plugin_-а _markdown-it-figure-caption_][7].

Пошто је замисао _@nuxt/content_-а систем за управљање чланцима у виду фајлова,
а не слогова у бази података, за сада не постоји уграђена подршка за складиштење
чланака у бази уместо у фајл систему, па је потребно директно позивати _remark_.
Наравно, могуће је напоредо са њим користити и _markdown-it_, али мислим да је
то непотребно дуплирање зависности (_dependencies_) и није идеално. За сада још
увек користим оба решења заједно, док не довршим подршку за приказивање текстова
у одељку „Текстови“ уз помоћ _remark_-а.

*[API]: Application Programming Interface
*[HTML]: HyperText Markup Language

[1]: https://nuxtjs.org/guide/release-notes/#v2.13.0
[2]: https://github.com/nuxt/components
[3]: https://content.nuxtjs.org
[4]: https://content.nuxtjs.org/fetching#wherequery
[5]: https://content.nuxtjs.org/fetching#searchfield-value
[6]: https://github.com/remarkjs/remark
[7]: https://github.com/remarkjs/ideas/issues/16

