title: Локални PHP API и JWT, први део
date: 2020-04-10T0:00:00.000Z
description: Савремени начин обезбеђивања API-ја
image: https://strahinja.org/img/blog/20200410-01.webp
imageAlt: Знак PHP-а, знак плус, знак JWT-а
id: lokalni-php-api-i-jwt-prvi-deo
categories:
    - ажурирања сајта
tags:
    - JWT
    - бекенд
    - backend
    - API
    - PHP
visible: true
---

Кад желимо да направимо веб апликацију која треба да има могућност измене
података, једно од првих питања на које треба одговорити је како ће бити решена
веза између фронтенда, који је видљив корисницима, и бекенда, који чини погон
апликације. Временом су се усталили стандарди за размену података, као што је
_AJAX_, и формати представљања података, као што је _JSON_. Следеће питање које
се намеће је како контролисати права приступа и измене података. Ако додамо
могућност измене чланака или других елемената наше апликације, није згодно да та
могућност буде доступна свима. Данас је један од најраспрострањенијих начина
ауторизовања [_JSON Web Token_][1], или скраћено _JWT_. Он функционише по
принципу јавног и тајног кључа. Подаци који нам могу послужити за идентификацију
чине _JWT_; они се потписују тајним кључем, кодирају уз помоћ _Base64_ и шаљу
клијенту. Када клијент жели да приступи заштићеном ресурсу, уз захтев пошаље и
_JWT_, који се декодира и провери дешифровањем потписа јавним кључем. Само јавни
кључ који одговара тајном кључу којим је шифрован _JWT_ ће верификовати податке.
_JWT_ се састоји од три дела: заглавља (_header_), главног дела (_payload_) и
потписа (_signature_), који се после _Base64_ кодирања раздвајају тачкама.

Рецимо, за токен:

> `eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwczovL2dvb2dsZS5jb20iLCJhdWQiOiJodHRwczovL2dvb2dsZS5jb20iLCJuYW1lIjoi0J_QtdGC0LDRgCDQn9C10YLRgNC-0LLQuNGbIiwidXNlcm5hbWUiOiJwZXRlcnBhbjEyMzQ1IiwiYWRtaW4iOmZhbHNlLCJpYXQiOjE1ODY1NDE2NjEsImV4cCI6MTU4NjU0NzU2NSwianRpIjoiYTU3MWQ0NWItMTdmNy00N2I3LWJjM2ItZWRhMzFkN2IyNmIzIn0.Hb4Z6bsFFY2k-tshcCtQBOt768MAH0jmYWrnHshfaeM`

Paste-овањем на сајту [jsonwebtoken.io][2] између осталог добијамо дешифрован
_JSON_, који представља главни део, _payload_, _JWT_-а:

```json
{
 "iss": "https://google.com",
 "aud": "https://google.com",
 "name": "Петар Петровић",
 "username": "peterpan12345",
 "admin": false,
 "iat": 1586541661,
 "exp": 1586545925,
 "jti": "a571d45b-17f7-47b7-bc3b-eda31d7b26b3"
}
```

Сва поља су потпуно опциона, али су нека од њих ипак стандардизована у стандарду
[RFC 7519][3]. На пример, `iat` (_Issued At_) поље садржи Уникс _timestamp_
времена креирања _JWT_-а, а `iss` (_Issuer_) ентитет који је креирао _JWT_.

Уколико се информације садржане у _JWT_-у тако лако декодирају, с правом се
поставља питање безбедности _JWT_-а. Управо то је разлог тога да се не
препоручује смештање осетљивих података као што су лозинке у _payload_. _JWT_
служи само да успостави неку тврдњу, рецимо да је вредност параметра `name`
ниска `Петар Петровић`. _Тачност_ тврдње се проверава дешифровањем потписа
јавним кључем.

[1]: https://jwt.io
[2]: https://www.jsonwebtoken.io
[3]: https://tools.ietf.org/html/rfc7519

